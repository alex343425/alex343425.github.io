document.addEventListener("DOMContentLoaded", function () {
    let originalData = []; // ÂÑ≤Â≠òÂéüÂßãË≥áÊñô
    let currentSort = { key: null, order: null }; // Áï∂ÂâçÊéíÂ∫èÁãÄÊÖã
    let filterPass = "all"; // È†êË®≠È°ØÁ§∫ÂÖ®ÈÉ®
    let selectedAccSources = new Set(); // Â≠òÂÑ≤ÈÅ∏‰∏≠ÁöÑ acc_source ÁØ©ÈÅ∏ÂÄº

    function loadData() {
        fetch('data_acc.json')
            .then(response => response.json())
            .then(data => {
                originalData = data; // ÂÑ≤Â≠òÂéüÂßãË≥áÊñô
                renderTable(data); // ÂàùÊ¨°Ê∏≤ÊüìË°®Ê†º
                addSortingListeners(); // Á∂ÅÂÆöÊéíÂ∫èÂäüËÉΩ
                addFilterListeners(); // Á∂ÅÂÆöÈÅéÊøæÂäüËÉΩ
            })
            .catch(error => console.error('ËºâÂÖ•Ë≥áÊñôÊôÇÁôºÁîüÈåØË™§:', error));
    }

    function renderTable(data) {
        const tableBody = document.getElementById('tableBody');
        tableBody.innerHTML = ''; // Ê∏ÖÁ©∫Ë°®Ê†ºÂÖßÂÆπ

        data.forEach(item => {
            // üîπ ÈÅéÊøæ pass
            if (filterPass === "0" && item.pass !== 0) return;
            if (filterPass === "1" && item.pass !== 1) return;

            // üîπ ÈÅéÊøæ acc_sourceÔºàÂ¶ÇÊûúÊúâÂãæÈÅ∏‰ªª‰ΩïÈÅ∏È†ÖÔºâ
            if (selectedAccSources.size > 0 && !selectedAccSources.has(String(item.acc_source))) return;

            const row = document.createElement('tr');
            row.innerHTML = `
                <td>
                    <img src="./acc_icon/${item.id}.png" alt="${item.n}" width="40" height="40" 
                         onerror="this.onerror=null; this.src='./acc_icon/default.png';"
                         onload="this.onerror=function() { this.src='./acc_icon_0.png'; }">
                    ${item.n}
                </td>
                <td>${item.s.Hp}</td>
                <td>${item.s.Offence}</td>
                <td>${item.s.Defence}</td>
                <td>${item.s.Magic}</td>
                <td>${item.s.Heal}</td>
                <td>${item.s.Speed}</td>
                <td>${item.d}</td>
            `;
            tableBody.appendChild(row);
        });
    }

    function addSortingListeners() {
        const headers = document.querySelectorAll('th.sortable');
        headers.forEach(header => {
            header.addEventListener('click', () => {
                const key = header.dataset.key;

                // Ëã•ÈáçË§áÈªûÊìäÁõ∏ÂêåÁöÑÂàóÔºåÊîπËÆäÊéíÂ∫èÈ†ÜÂ∫èÔºõÂê¶ÂâáÂàùÂßãÂåñÁÇ∫ÈôçÂ∫è
                if (currentSort.key === key) {
                    currentSort.order = currentSort.order === 'desc' ? 'asc' : 
                                        currentSort.order === 'asc' ? null : 'desc';
                } else {
                    currentSort.key = key;
                    currentSort.order = 'desc';
                }

                // Êõ¥Êñ∞Ë°®Ê†ºË≥áÊñô
                sortTable(key, currentSort.order);

                // Êõ¥Êñ∞Ê®ôÈ°åÊñáÂ≠ó
                updateHeaders(header);
            });
        });
    }

    function sortTable(key, order) {
        if (!order) {
            // Ëã•ÁÑ°ÊéíÂ∫èÈ†ÜÂ∫èÔºåÊÅ¢Âæ©ÂéüÂßãË≥áÊñô
            renderTable(originalData);
            return;
        }

        const sortedData = [...originalData].sort((a, b) => {
            const valA = a.s[key];
            const valB = b.s[key];

            if (valA === valB) return originalData.indexOf(a) - originalData.indexOf(b); // ÂêåÂÄºÊôÇ‰æùÂéüÈ†ÜÂ∫è
            return order === 'desc' ? valB - valA : valA - valB;
        });

        renderTable(sortedData);
    }

    function updateHeaders(activeHeader) {
        // ÈáçÁΩÆÊâÄÊúâÊ®ôÈ°å
        document.querySelectorAll('th.sortable').forEach(header => {
            header.textContent = header.textContent.replace(/(‚Üì|‚Üë)$/, '');
        });

        // Â¢ûÂä†ÁÆ≠È†≠ÊåáÁ§∫
        if (currentSort.order === 'desc') {
            activeHeader.textContent += '‚Üì';
        } else if (currentSort.order === 'asc') {
            activeHeader.textContent += '‚Üë';
        }
    }

    function addFilterListeners() {
        // üîπ `pass` ÈÅéÊøæ
        document.querySelectorAll('input[name="passFilter"]').forEach(radio => {
            radio.addEventListener('change', function () {
                filterPass = this.value; // ÂèñÂæóÁØ©ÈÅ∏Ê¢ù‰ª∂
                renderTable(originalData); // ÈáçÊñ∞Ê∏≤ÊüìË°®Ê†º
            });
        });

        // üîπ `acc_source` ÈÅéÊøæ
        document.querySelectorAll('.accSourceFilter').forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                if (this.checked) {
                    selectedAccSources.add(this.value);
                } else {
                    selectedAccSources.delete(this.value);
                }
                renderTable(originalData); // ÈáçÊñ∞Ê∏≤ÊüìË°®Ê†º
            });
        });
    }

    loadData();
});
